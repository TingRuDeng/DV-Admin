"""
Django settings_bak for backend project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings_bak and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import psutil
import environ
from pathlib import Path
from datetime import timedelta


# 初始化 django-environ
env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent
# sys.path.insert(0, str(BASE_DIR / 'apps'))
# 确定当前环境，默认为开发环境
environment = os.environ.get('ENVIRONMENT', 'dev')
# 根据环境读取对应的 .env 文件
if environment == 'dev':
    env_file = (BASE_DIR.parent / '.env.dev').resolve()
elif environment == 'pro':
    env_file = (BASE_DIR.parent / '.env.pro').resolve()
else:
    env_file = (BASE_DIR.parent / f'.env.{environment}').resolve()

# 确保文件存在
if Path(env_file).exists():
    env.read_env(env_file)
else:
    raise FileNotFoundError(f'警告: 未找到环境变量文件: {env_file}')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG')

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    # 解决跨域问题
    'corsheaders',
    # model过滤
    'django_filters',
    # swagger
    'drf_yasg',
    # WebSocket
    'channels',
    # django_user_agents
    'django_user_agents',
    # 定时任务
    # 'django_apscheduler',
    # 注册apps
    'drf_admin.apps.oauth',
    'drf_admin.apps.system',
    'drf_admin.apps.information',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # django_user_agents
    'django_user_agents.middleware.UserAgentMiddleware',
    # IP黑名单校验
    'drf_admin.utils.middleware.IpBlackListMiddleware',
    # 在线用户监控
    # 'drf_admin.utils.middleware.OnlineUsersMiddleware',
    # 下面两个中间件放置在最后位置, 且两者保证顺序
    'drf_admin.utils.middleware.OperationLogMiddleware',
    'drf_admin.utils.middleware.ResponseMiddleware',
    # 驼峰转蛇形
    'djangorestframework_camel_case.middleware.CamelCaseMiddleWare'
]

# CORS跨域设置，指定允许访问你的 Django 后端 API 的前端域名/IP列表
# 根据环境设置CORS
CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=['http://localhost:9527', 'http://127.0.0.1:9527'])

# 允许携带cookie
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'drf_admin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'drf_admin.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
DATABASES = {
    "default": env.db("DATABASE_URL", default=f"sqlite:///{BASE_DIR}/db.sqlite3")  # 默认为 SQLite
}

# Redis configuration
REDIS_PWD = env.str('REDIS_PWD', '')
REDIS_HOST = env.str('REDIS_HOST', '')
REDIS_PORT = env.int('REDIS_PORT', None)
if REDIS_PWD:
    REDIS_STR = f':{REDIS_PWD}@'
else:
    REDIS_STR = ''

# 如果能获取到Redis配置，则使用Redis缓存；否则使用本地缓存
if REDIS_HOST and REDIS_PORT:
    # 使用Redis缓存
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': f'redis://{REDIS_STR}{REDIS_HOST}:{REDIS_PORT}/0',
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        },
        # session
        'session': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': f'redis://{REDIS_STR}{REDIS_HOST}:{REDIS_PORT}/1',
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        },
        # 用户信息/ip黑名单
        'user_info': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': f'redis://{REDIS_STR}{REDIS_HOST}:{REDIS_PORT}/2',
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        },
        # 在线用户监测
        'online_user': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': f'redis://{REDIS_STR}{REDIS_HOST}:{REDIS_PORT}/3',
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        },
    }
else:
    # 使用本地缓存作为后备方案
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-default'
        },
        'session': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-session'
        },
        'user_info': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-user_info'
        },
        'online_user': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-online_user'
        }
    }
# 设置Django session使用redis作为后端存储
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'session'

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# 指定自定义的用户模型
AUTH_USER_MODEL = 'system.Users'

# DRF配置
REST_FRAMEWORK = {
    # 异常处理
    'EXCEPTION_HANDLER': 'drf_admin.utils.exceptions.exception_handler',
    # 全局分页
    'DEFAULT_PAGINATION_CLASS': 'drf_admin.utils.pagination.GlobalPagination',
    'DEFAULT_PERMISSION_CLASSES':
        (
            'rest_framework.permissions.IsAuthenticated',  # 登录验证
            'drf_admin.utils.permissions.RBACPermission',  # 自定义RBAC权限认证
        ),
    'DEFAULT_AUTHENTICATION_CLASSES':
        (
            'rest_framework_simplejwt.authentication.JWTAuthentication',  # DRF-JWT认证
        ),
    # DRF-API文档
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_THROTTLE_RATES': {'anon': '10/min', },

    # 响应数据转换为驼峰格式，便于前端接收
    'DEFAULT_RENDERER_CLASSES': (
        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',
        'djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer',  # 可选，用于API调试界面
    ),
    # 接收前端驼峰格式数据时转换为蛇形格式
    'DEFAULT_PARSER_CLASSES': (
        # 处理 JSON 体的转换（如 POST 数据）
        'djangorestframework_camel_case.parser.CamelCaseJSONParser',
        # 处理表单数据（如 multipart/form-data）
        'djangorestframework_camel_case.parser.CamelCaseFormParser',
        'djangorestframework_camel_case.parser.CamelCaseMultiPartParser',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=env.int('JWT_ACCESS_TOKEN_LIFETIME', default=60)),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=env.int('JWT_REFRESH_TOKEN_LIFETIME', default=1)),

    # 'ROTATE_REFRESH_TOKENS': False,
    # 'BLACKLIST_AFTER_ROTATION': True,
    # 'UPDATE_LAST_LOGIN': False,
    #
    # 'ALGORITHM': 'HS256',
    # 'SIGNING_KEY': SECRET_KEY,  # 使用 Django 的 SECRET_KEY
    # 'VERIFYING_KEY': None,
    # 'AUDIENCE': None,
    # 'ISSUER': None,
    #
    # 'AUTH_HEADER_TYPES': ('Bearer',),  # 令牌前缀
    # 'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    # 'USER_ID_FIELD': 'id',
    # 'USER_ID_CLAIM': 'user_id',
}

AUTHENTICATION_BACKENDS = [
    'drf_admin.apps.oauth.utils.UsernameMobileAuthBackend',  # 自定义用户认证方法
]

# 新增用户默认密码
DEFAULT_PWD = env.str('DEFAULT_PWD', default='123456')

# 项目BASE API, 如设置时必须以/结尾，可使用v1, v2等版本号
BASE_API = 'api/'
WHITE_LIST = [
    f'/{BASE_API}oauth/login/',
    f'/{BASE_API}oauth/logout/',
    f'/{BASE_API}oauth/info/',
    f'/{BASE_API}oauth/menus/routes/',
    f'/{BASE_API}system/users/profile/',
    f'/{BASE_API}system/notices/my-page/',
    f'/{BASE_API}system/dict-items/',
]  # 权限认证白名单
REGEX_URL = '^{url}$'  # 权限匹配时,严格正则url
PROJECT_START_TIME = psutil.Process().create_time()

# Swagger配置 https://github.com/axnsan12/drf-yasg/issues/58
SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    },
}

# channels配置(配置ASGI, 用于实现WebSocket)
ASGI_APPLICATION = 'drf_admin.routing.application'

# django-channels配置 - 直接读取配置文件中的Redis配置
# 如果能获取到Redis配置，则使用Redis作为Channel Layer后端；否则使用内存后端
if REDIS_HOST and REDIS_PORT:
    # 使用Redis作为Channel Layer后端
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': "channels_redis.core.RedisChannelLayer",
            'CONFIG': {
                'hosts': [f'redis://{REDIS_STR}{REDIS_HOST}:{REDIS_PORT}/4'],
                'symmetric_encryption_keys': [SECRET_KEY],
                'capacity': 1500,
                'expiry': 10
            },
        },
    }
else:
    # 使用内存后端作为后备方案
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels.layers.InMemoryChannelLayer',
            'CONFIG': {
                'capacity': 1500,
                'expiry': 10
            },
        },
    }

# simpleui配置项
SIMPLEUI_HOME_INFO = False  # 设置admin站点不显示simpleui的git页

# 日志配置
LOGS_DIR = BASE_DIR.parent / 'logs'
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'standard': {
            'format': '[%(asctime)s][%(levelname)s][%(filename)s:%(lineno)d]==>[%(message)s]'
        },
        'simple': {
            'format': '[%(asctime)s][%(levelname)s]==>[%(message)s]'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'admin_info.log'),
            'maxBytes': 1024 * 1024 * 50,
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        # 向终端中输出日志
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        'operation': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'admin_operation.log'),
            'maxBytes': 1024 * 1024 * 50,  # 50 MB
            'backupCount': 5,
            'formatter': 'simple',
            'encoding': 'utf-8',
        },
        'query': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'admin_query.log'),
            'maxBytes': 1024 * 1024 * 50,  # 50 MB
            'backupCount': 5,
            'formatter': 'simple',
            'encoding': 'utf-8',
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'admin_error.log'),
            'maxBytes': 1024 * 1024 * 50,  # 50 MB
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },

    },
    'loggers': {
        # 记录视图中手动info日志
        'info': {
            'handlers': ['default', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        # 非GET方法操作日志
        'operation': {
            'handlers': ['operation'],
            'level': 'INFO',
            'propagate': True,
        },
        # GET方法查询日志
        'query': {
            'handlers': ['query'],
            'level': 'INFO',
            'propagate': True,
        },
        # 记录视图异常日志
        'error': {
            'handlers': ['error', 'console'],
            'level': 'ERROR',
            'propagate': True,
        }
    }
}

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'